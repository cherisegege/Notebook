
线程

会话承载进程组
进程组承载进程
进程承载线程

先有标准，再有实现

posix标准线程
pthread

一、线程的概念及标识
	线程单独运行的函数
	ps axm -L
	
	线程标识的类型
		pthread_t 结构	

	pthread_self(3);
	pthread_equal(3);

man 7 pthreads

二、线程的创建
	pthread_create(3);
	

三、线程的终止
	<1>调用pthread_exit(3);
	<2>在线程函数中return;
	<3>被其他线程取消
	<4>任意一个线程调用exit(3)或main线程return


四、线程的收尸
	pthread_join(3);


五、线程的清理函数
	pthread_cleanup_push();
	pthread_cleanup_pop();

*六、线程的同步
	临界区：多线程发生竞争的位置

	一种提供多线程同步机制
	互斥量
	pthread_mutex_t;
	pthread_mutex_init();
	pthread_mutex_lock();	
	pthread_mutex_unlock();	
	pthread_mutex_destroy();

	条件变量
	pthread_cond_t
	pthread_cond_init();
	pthread_cond_wait();
	pthread_cond_signal();
	pthread_cond_broadcast(:w
);
	pthread_cond_destroy();

七、属性(了解)
	线程
	pthread_attr_t
	pthread_attr_init();
	pthread_attr_setdetachsate();//线程分离
	pthread_attr_setstacksize();
	pthread_attr_destroy();

	pthread_detach();

	同步
	互斥量属性
	pthread_mutexattr_init();
	pthread_mutexattr_settype();
	pthread_mutexattr_gettype();
	pthread_mutexattr_destroy();

	条件变量属性
	phtread_condattr_init();
	pthread_condattr_setpshared();
	pthread_condattr_destroy();

	读写锁
	读锁相当于共享锁
	写锁相当于独占锁
	pthread_rwlock_init();
	pthread_rwlock_rdlock();
	pthread_rwlock_wrlock();
	pthread_rwlock_unlock();
	prhread_rwlock_destroy();	
	避免写者饿死


八、重入:函数一次调用还没有结束又发生第二次调用

了解


九、线程的取消
	pthread_cancel();	

设置取消状态：pthread_setcancelstate();
设置取消类型：pthread_setcanceltype();异步(立刻取消)/延迟(取消点)
设置取消点：pthread_testcancel();	

十、比较
	线程和进程
	
	fork(2)		pthread_create(3)
	wait(2)		pthread_join(3)	
	exit(2)		pthread_exit(3);
	atexit(3);	pthread_cleanup_push() pthread_cleanup_pop()
创建一个线程相对于创建进程开销要小很多

	线程和信号
	信号是可以以线程为单位发送的
		pthread_kill();
	以线程为单位屏蔽信号
		pthread_sigmask();
	以线程为单位等待信号
		pthread_wait();

	尽量避免在多线程模型中使用信号机制,推荐单独创建一个线程专门处理信号

	线程和i/o
		pread(2);
		pwrite(2);





