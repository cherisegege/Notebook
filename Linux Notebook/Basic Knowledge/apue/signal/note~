
信号

同步:程序执行到哪一步，会导致什么样的结果都是可预测的
异步:事件什么时候到来是未知的，事件到来后会产生什么样的结果也是未知的
阻塞：
非阻塞

并发：
	多进程+信号（初步异步）
	多线程	（强烈异步）
	
	尽量避免多线程和信号的混用

一、信号的概念
	软件层面的中断

	信号的分类：
		kill -l
		标准信号(1~31):默认行为,不排队,会丢失
		实时信号(34~64):排队,不会丢失

	man 7 signal

标准信号对进程产生的影响分为：
	Term	终止进程
	Ign		忽略信号
	Core	终止进程并产成core文件
	Stop	停止进程
	Cont	停止的进程继续

信号的处理行为：
	Default	默认动作
	Ignore	忽略
	Defined	通过signal()或者sigaction()定义行为	

二、signal函数
	
	typedef void (*sighandler_t)(int);
	sighandler_t signal(int signum, sighandler_t handler);

	void (*signal)(int signum, void(*handler)(int))(int);

	信号会打断阻塞的系统调用

假错
	阻塞 	EINTR
	非阻塞	EAGAIN

三、信号的不可靠
	信号的行为不可靠

四、信号的响应过程
	1.信号为什么会丢失
	2.如何忽略一个信号
	3.为什么在响应一个信号的期间不会再次响应此信号
	4.信号的响应是嵌套的

五、可重入函数
	所有的系统调用函数都是可重入函数，反之不成立
	部分库函数也是可重入函数，memmove(), memcpy()...

    不可重入		可重入
	localtime()		localtime_r();
	gmtime()		gmtime_r();
	rand()			rand_r();

六、捕捉异步事件的方法
	1.查询法
	2.通知法

流控:
	1.漏桶
	2.令牌桶	
		三要素：
			速率(cps)
			令牌(token)
			上限(burst)

七、信号相关函数
	kill(2);
	raise(3); == kill(getpid(), sig);
	pause(2);
	alarm(2);
	sleep(3); 不要和alarm(2)混用
	system(3);要求忽略SIGQUIT和SIGINT 阻塞SIGCHLD
	

八、信号集
类型：
	sigset_t
	信号的集合

	sigemptyset(3);
	sigfillset(3);	
	sigaddset(3);
	sigdelset(3);
	sigismember(3);

	sigsuspend(2);

	sigpromask(2);
	sigpending(2);

能够实现在信号处理函数中跳转
	sigsetjmp(3);
	siglongjmp(3);

九、
	sigaction(2);
	setitimer(2);

十、abort(2);
	产生SIGABRT信号，导致进程的异常终止

十一、实时信号








